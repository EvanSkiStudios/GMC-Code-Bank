// Source: Paeth, Graphics Gems V
function PntOnLine(px, py, qx, qy, tx, ty) {
px=floor(px); py=floor(py); qx=floor(qx); qy=floor(qy); tx=floor(tx); ty=floor(ty);
/*
* given a line through P:(px,py) Q:(qx,qy) and T:(tx,ty)
* return 0 if T is not on the line through <--P--Q-->
* 1 if T is on the open ray ending at P: <--P
* 2 if T is on the closed interior along: P--Q
* 3 if T is on the open ray beginning at Q: Q-->
*
* Example: consider the line P = (3,2), Q = (17,7). A plot
* of the test points T(x,y) (with 0 mapped onto '.') yields:
*
* 8| . . . . . . . . . . . . . . . . . 3 3\
* Y 7| . . . . . . . . . . . . . . 2 2 Q 3 3 Q = 2
* 6| . . . . . . . . . . . 2 2 2 2 2 . . .
* a 5| . . . . . . . . 2 2 2 2 2 2 . . . . .
* x 4| . . . . . 2 2 2 2 2 2 . . . . . . . .
* i 3| . . . 2 2 2 2 2 . . . . . . . . . . .
* s 2| 1 1 P 2 2 . . . . . . . . . . . . . . P = 2
* 1| 1 1 . . . . . . . . . . . . . . . . .
* +--------------------------------------
* 1 2 3 4 5 X-axis 10 15 19
*
* Point-Line distance is normalized with the Infinity Norm
* avoiding square-root code and tightening the test vs the
* Manhattan Norm. All math is done on the field of integers.
* The latter replaces the initial ">= MAX(...)" test with
* "> (ABS(qx-px) + ABS(qy-py))" loosening both inequality
* and norm, yielding a broader target line for selection.
* The tightest test is employed here for best discrimination
* in merging collinear (to grid coordinates) vertex chains
* into a larger, spanning vectors within the Lemming editor.
*//* addenda: this first set of tests has been added to detect
* the case where the line is of zero length. Remove this if
* such a case is impossible.
*/
if ((px == qx) && (py == qy))
if ((tx == px) && (ty == py)) return 2;
else return 0;
if ( abs((qy-py)*(tx-px)-(ty-py)*(qx-px)) >= (max(abs(qx-px), abs(qy-py)))) return(0);
if (((qx<px)&&(px<tx)) || ((qy<py)&&(py<ty))) return(1);
if (((tx<px)&&(px<qx)) || ((ty<py)&&(py<qy))) return(1);
if (((px<qx)&&(qx<tx)) || ((py<qy)&&(qy<ty))) return(3);
if (((tx<qx)&&(qx<px)) || ((ty<qy)&&(qy<py))) return(3);
return(2);
}


// Source: Paul Bourke
// Incorrectly returns the midpoint of the test line (this)
// as the collision point when test against line has length of 0,
// so we use Paeth's PntOnLine function to guestimate collision.
// Because PntOnLine is integer-based, so normalized values will
// all collide at their integer equivalents 0,1 (so we scale by
// an arbitrary value of 100)
function LineLine( ax,ay,ax2,ay2,bx,by,bx2,by2 ) {
  if ( bx==bx2 and by==by2 ) {
   var res;
   res=PntOnLine(
    (ax*100.0),
    (ay*100.0),
    (ax2*100.0),
    (ay2*100.0),
    (bx*100.0),
    (by*100.0)
   );
   return { x: bx, y: by, colliding: (res!=2) };
  } else
  if ( ax==x2 && ay==y2 ) {
   var res;
   res=PntOnLine(
    (bx*100.0),
    (by*100.0),
    (bx2*100.0),
    (by2*100.0),
    (ax*100.0),
    (ay*100.0)
   );
   return { x: ax, y: ay, colliding: (res!=2) };
  }
  var mua,mub;
  var denom,numera,numerb;
  denom  = (by2-by) * (ax2-ax) - (bx2-bx) * (y2-y);
  numera = (bx2-bx) * (ay-by)  - (by2-by) * (x-bx);
  numerb = (ax2-ax) * (ay-by)  - (ay2-ay) * (x-bx);
  /* Are the line coincident? */
  if (abs(numera) < 0.000001 && abs(numerb) < 0.000001 && abs(denom) < 0.000001) {
	  return { x: (ax + ax2) / 2.0, y: (ay + ay2) / 2.0, colliding: true };
  }
  /* Are the line parallel */
  if (abs(denom) < 0.000001 ) {
	  return { x:0.0, y:0.0, colliding: false };
  }
  /* Is the intersection along the the segments */
  mua = numera / denom;
  mub = numerb / denom;
  if (mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0) {
	  return { x:0.0, y:0.0, colliding: false };
  }
  return { x: ax + mua * (ax2 - ax), y: ay + mua * (ay2 - ay), colliding: true };
}
